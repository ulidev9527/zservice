// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: zconfig.proto

package zconfig_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Zconfig_GetFileConfig_FullMethodName = "/zconfig_pb.zconfig/GetFileConfig"
)

// ZconfigClient is the client API for Zconfig service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ZconfigClient interface {
	GetFileConfig(ctx context.Context, in *GetFileConfig_REQ, opts ...grpc.CallOption) (*GetFileConfig_RES, error)
}

type zconfigClient struct {
	cc grpc.ClientConnInterface
}

func NewZconfigClient(cc grpc.ClientConnInterface) ZconfigClient {
	return &zconfigClient{cc}
}

func (c *zconfigClient) GetFileConfig(ctx context.Context, in *GetFileConfig_REQ, opts ...grpc.CallOption) (*GetFileConfig_RES, error) {
	out := new(GetFileConfig_RES)
	err := c.cc.Invoke(ctx, Zconfig_GetFileConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ZconfigServer is the server API for Zconfig service.
// All implementations must embed UnimplementedZconfigServer
// for forward compatibility
type ZconfigServer interface {
	GetFileConfig(context.Context, *GetFileConfig_REQ) (*GetFileConfig_RES, error)
	mustEmbedUnimplementedZconfigServer()
}

// UnimplementedZconfigServer must be embedded to have forward compatible implementations.
type UnimplementedZconfigServer struct {
}

func (UnimplementedZconfigServer) GetFileConfig(context.Context, *GetFileConfig_REQ) (*GetFileConfig_RES, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileConfig not implemented")
}
func (UnimplementedZconfigServer) mustEmbedUnimplementedZconfigServer() {}

// UnsafeZconfigServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ZconfigServer will
// result in compilation errors.
type UnsafeZconfigServer interface {
	mustEmbedUnimplementedZconfigServer()
}

func RegisterZconfigServer(s grpc.ServiceRegistrar, srv ZconfigServer) {
	s.RegisterService(&Zconfig_ServiceDesc, srv)
}

func _Zconfig_GetFileConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileConfig_REQ)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZconfigServer).GetFileConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zconfig_GetFileConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZconfigServer).GetFileConfig(ctx, req.(*GetFileConfig_REQ))
	}
	return interceptor(ctx, in, info, handler)
}

// Zconfig_ServiceDesc is the grpc.ServiceDesc for Zconfig service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Zconfig_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zconfig_pb.zconfig",
	HandlerType: (*ZconfigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFileConfig",
			Handler:    _Zconfig_GetFileConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zconfig.proto",
}
