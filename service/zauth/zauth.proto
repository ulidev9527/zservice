syntax = "proto3";
package zauth_pb;
option go_package="./zauth_pb";

message Default_REQ{} // 默认请求
message Default_RES {
    uint32 code = 1;  // 服务状态码 约定: 1 表示成功, 其它数字根据业务进行返回
}

// 账户/登陆相关
message LoginByPhone_REQ {
    string phone      = 1;  // 手机号 +86****
    uint32 expires    = 2;  // 过期时间 没有传入 (单位: 秒)，最小 30s，过期时间到了后需要重新授权
    string verifyCode = 3;  // 验证码
}
message LoginByAccount_REQ {
    string account      = 1;   // 账号
    string password     = 2;   // 密码
    uint32 expires      = 3;   // 过期时间 没有传入 (单位: 秒)，最小 30s，过期时间到了后需要重新授权
}
message Login_RES{
    uint32 code           = 1;  // 服务状态码 约定: 1 表示成功, 其它数字根据业务进行返回
    uint32 uid            = 2;  // 用户ID
}
message CheckAuth_REQ{
    string Auth = 2;  // 权限, 字符串数组，[服务名, 动作, 路径]
}
message CheckAuth_RES{
    uint32 code           = 1;  // 服务状态码 约定: 1 表示成功, 其它数字根据业务进行返回
    bool   isTokenRefresh = 2;  // 是否需要刷新token, true 表示需要，不受错误码影响
    string token          = 3;  // 新的令牌， IsTokenRefresh 和 Token 为固定格式，不受错误码影响
    uint32 uid            = 4;  // 用户ID
}
message HasAccountID_REQ{
    uint32 accountID = 1;  // 账号ID
}

// 权限相关
message PermissionInfo{
    uint32 id      = 1;  // 权限ID
    string name    = 2;  // 权限名称
    string service = 3;  // 权限所属服务
    string action  = 4;  // 动作名称
    string path    = 5;  // 权限路径
    uint32 state   = 6;  // 权限状态 0禁用 1公开访问 2授权访问 3继承父级
}
message PermissionInfo_RES{
    uint32         code = 1;  // 服务状态码 约定: 1 表示成功, 其它数字根据业务进行返回
    PermissionInfo info = 2;  // 权限
}
message PermissionInfoList_RES{
    uint32   code                = 1;  // 服务状态码 约定: 1 表示成功, 其它数字根据业务进行返回
    repeated PermissionInfo list = 2;  // 权限列表
}
message PermissionListGet_REQ{
    uint32 page   = 1;  // 第几页
    uint32 size   = 2;  // 每页多少条
    string search = 3;  // 搜索关键字
}
message PermissionBind_REQ{
    uint32 permissionID = 1;  // 权限ID
    uint32 targetType   = 2;  // 权限类型 1组织 2账号
    uint32 targetID     = 3;  // 权限对象ID
    uint64 expires      = 4;  // 过期时间
    uint32 state        = 5;  // 是否允许访问 0禁止 1允许
}

// 组织相关
message OrgInfo{
    uint32 id       = 1;  // 组织ID
    string name     = 2;  // 组织名称
    uint32 rootID   = 3;  // 根组织ID
    uint32 parentID = 4;  // 父组织ID
    uint32 state    = 5;  // 组织状态 0禁用 1公开访问 2授权访问 3继承父级
}

message OrgInfo_RES{
    uint32  code = 1;  // 服务状态码 约定: 1 表示成功, 其它数字根据业务进行返回
    OrgInfo info = 2;  // 组织
}

message OrgInfoList_RES{
    uint32   code         = 1;  // 服务状态码 约定: 1 表示成功, 其它数字根据业务进行返回
    repeated OrgInfo list = 2;  // 组织列表
}
message OrgListGet_REQ{
    uint32 page   = 1;  // 第几页
    uint32 size   = 2;  // 每页多少条
    string search = 3;  // 搜索关键字
}

// 短信相关
message SMSVerifyCodeSend_REQ { // 发送验证码 请求
    string phone      = 1;  // 手机号 必须带有 +86
    string verifyCode = 2;  // 接口验证码，如果需要就上传
}
message SMSSendVerifyCode_RES {
    uint32 code       = 1;  // 状态
    string verifyCode = 2;  // 验证码

}
message SMSVerifyCodeVerify_REQ { // 发送验证码 请求
    string phone      = 1;  // 手机号 必须带有 +86
    string verifyCode = 2;  // 验证码
}

// 其它
message HasZZZZString_REQ{
    string str = 1; // 字符串
}

// 配置相关
message ConfigGetFileConfig_REQ {
    string fileName = 1;  // 文件名
    string keys     = 2;  // key 需要返回哪些值, 空值返回全部
    string Service  = 3;  // 服务名
}
message ConfigGetFileConfig_RES{
    uint32 code  = 1;  // 服务状态码 约定: 1 表示成功, 其它数字根据业务进行返回
    string value = 2;  // 返回的数据，根据情况不同返回数据不同
}
message ConfigSyncServiceFileConfig_REQ{
    string filePath = 1;  // 文件路径
    string Service  = 2;  // 服务名
    uint32 parser   = 3;  // 解析器
}
message ConfigSyncServiceEnvConfig_REQ{
    string filePath = 1;  // 文件路径
    string service  = 2;  // 服务名
}
message ConfigSyncServiceEnvConfig_RES{
    uint32 code = 1;  // 服务状态码 约定: 1 表示成功, 其它数字根据业务进行返回
    string auth = 2;  // 授权码
}
message ConfigGetServiceEnvConfig_REQ{
    string auth    = 1;  // 授权码
}
message ConfigGetServiceEnvConfig_RES{
    uint32 code  = 1;  // 服务状态码 约定: 1 表示成功, 其它数字根据业务进行返回
    string value = 2;  // 返回的数据
}
message ConfigGetEnvConfig_REQ{
    string service = 1;  // 服务名
}

service zauth{

    rpc Logout(Default_REQ) returns(Default_RES);               // 登出
    rpc LoginByPhone(LoginByPhone_REQ) returns(Login_RES);      // 手机号登陆
    rpc LoginByAccount(LoginByAccount_REQ) returns(Login_RES);  // 账户登陆
    rpc LoginCheck(Default_REQ) returns(Default_RES);           // 登陆检查
    rpc HasAccountID(HasAccountID_REQ) returns(Default_RES);    // 检查账户是否存在
    
    rpc PermissionCreate(PermissionInfo) returns(PermissionInfo_RES);              // 创建权限
    rpc PermissionListGet(PermissionListGet_REQ) returns(PermissionInfoList_RES);  // 获取权限列表权限列表
    rpc PermissionUpdate(PermissionInfo) returns(PermissionInfo_RES);              // 更新权限
    rpc PermissionBind(PermissionBind_REQ) returns(Default_RES);                   // 权限绑定

    rpc OrgCreate(OrgInfo) returns(OrgInfo_RES);              // 创建组织
    rpc OrgListGet(OrgListGet_REQ) returns(OrgInfoList_RES);  // 获取组织列表
    rpc OrgUpdate(OrgInfo) returns(OrgInfo_RES);              // 更新组织
    
    rpc SMSVerifyCodeSend(SMSVerifyCodeSend_REQ) returns(SMSSendVerifyCode_RES);  // 发送验证码
    rpc SMSVerifyCodeVerify(SMSVerifyCodeVerify_REQ) returns(Default_RES);        // 验证验证码

    rpc CheckAuth(CheckAuth_REQ) returns(CheckAuth_RES);  // 检查权限

    rpc HasZZZZString(HasZZZZString_REQ) returns(Default_RES); // 验证ZZZZ字符串

    rpc ConfigGetFileConfig(ConfigGetFileConfig_REQ) returns(ConfigGetFileConfig_RES);                       // 获取文件配置
    rpc ConfigSyncServiceFileConfig(ConfigSyncServiceFileConfig_REQ) returns(Default_RES);                   // 同步服务的文件配置
    rpc ConfigSyncServiceEnvConfig(ConfigSyncServiceEnvConfig_REQ) returns(ConfigSyncServiceEnvConfig_RES);  // 同步服务的环境变量
    rpc ConfigGetServiceEnvConfig(ConfigGetServiceEnvConfig_REQ) returns(ConfigGetServiceEnvConfig_RES);     // 获取服务的环境变量
    rpc ConfigGetEnvConfig(ConfigGetEnvConfig_REQ) returns(ConfigGetServiceEnvConfig_RES);                   // 获取环境变量

    rpc ServiceRegist(Default_REQ)returns(Default_RES);  // 服务注册, 创建服务组/服务权限
}