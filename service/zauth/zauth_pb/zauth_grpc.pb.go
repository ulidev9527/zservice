// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: zauth.proto

package zauth_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Zauth_Logout_FullMethodName            = "/zauth_pb.zauth/Logout"
	Zauth_LoginByPhone_FullMethodName      = "/zauth_pb.zauth/LoginByPhone"
	Zauth_LoginByAccount_FullMethodName    = "/zauth_pb.zauth/LoginByAccount"
	Zauth_GetPermissionList_FullMethodName = "/zauth_pb.zauth/GetPermissionList"
	Zauth_SMSSendVerifyCode_FullMethodName = "/zauth_pb.zauth/SMSSendVerifyCode"
	Zauth_SMSVerifyCode_FullMethodName     = "/zauth_pb.zauth/SMSVerifyCode"
	Zauth_CheckAuth_FullMethodName         = "/zauth_pb.zauth/CheckAuth"
	Zauth_GetFileConfig_FullMethodName     = "/zauth_pb.zauth/GetFileConfig"
)

// ZauthClient is the client API for Zauth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ZauthClient interface {
	Logout(ctx context.Context, in *Default_REQ, opts ...grpc.CallOption) (*Default_RES, error)
	LoginByPhone(ctx context.Context, in *LoginByPhone_REQ, opts ...grpc.CallOption) (*Default_RES, error)
	LoginByAccount(ctx context.Context, in *LoginByAccount_REQ, opts ...grpc.CallOption) (*Default_RES, error)
	GetPermissionList(ctx context.Context, in *GetPermissionList_REQ, opts ...grpc.CallOption) (*GetPermissionList_RES, error)
	SMSSendVerifyCode(ctx context.Context, in *SMSSendVerifyCode_REQ, opts ...grpc.CallOption) (*SMSSendVerifyCode_RES, error)
	SMSVerifyCode(ctx context.Context, in *SMSVerifyCode_REQ, opts ...grpc.CallOption) (*Default_RES, error)
	CheckAuth(ctx context.Context, in *CheckAuth_REQ, opts ...grpc.CallOption) (*CheckAuth_RES, error)
	GetFileConfig(ctx context.Context, in *GetFileConfig_REQ, opts ...grpc.CallOption) (*GetFileConfig_RES, error)
}

type zauthClient struct {
	cc grpc.ClientConnInterface
}

func NewZauthClient(cc grpc.ClientConnInterface) ZauthClient {
	return &zauthClient{cc}
}

func (c *zauthClient) Logout(ctx context.Context, in *Default_REQ, opts ...grpc.CallOption) (*Default_RES, error) {
	out := new(Default_RES)
	err := c.cc.Invoke(ctx, Zauth_Logout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zauthClient) LoginByPhone(ctx context.Context, in *LoginByPhone_REQ, opts ...grpc.CallOption) (*Default_RES, error) {
	out := new(Default_RES)
	err := c.cc.Invoke(ctx, Zauth_LoginByPhone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zauthClient) LoginByAccount(ctx context.Context, in *LoginByAccount_REQ, opts ...grpc.CallOption) (*Default_RES, error) {
	out := new(Default_RES)
	err := c.cc.Invoke(ctx, Zauth_LoginByAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zauthClient) GetPermissionList(ctx context.Context, in *GetPermissionList_REQ, opts ...grpc.CallOption) (*GetPermissionList_RES, error) {
	out := new(GetPermissionList_RES)
	err := c.cc.Invoke(ctx, Zauth_GetPermissionList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zauthClient) SMSSendVerifyCode(ctx context.Context, in *SMSSendVerifyCode_REQ, opts ...grpc.CallOption) (*SMSSendVerifyCode_RES, error) {
	out := new(SMSSendVerifyCode_RES)
	err := c.cc.Invoke(ctx, Zauth_SMSSendVerifyCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zauthClient) SMSVerifyCode(ctx context.Context, in *SMSVerifyCode_REQ, opts ...grpc.CallOption) (*Default_RES, error) {
	out := new(Default_RES)
	err := c.cc.Invoke(ctx, Zauth_SMSVerifyCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zauthClient) CheckAuth(ctx context.Context, in *CheckAuth_REQ, opts ...grpc.CallOption) (*CheckAuth_RES, error) {
	out := new(CheckAuth_RES)
	err := c.cc.Invoke(ctx, Zauth_CheckAuth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zauthClient) GetFileConfig(ctx context.Context, in *GetFileConfig_REQ, opts ...grpc.CallOption) (*GetFileConfig_RES, error) {
	out := new(GetFileConfig_RES)
	err := c.cc.Invoke(ctx, Zauth_GetFileConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ZauthServer is the server API for Zauth service.
// All implementations must embed UnimplementedZauthServer
// for forward compatibility
type ZauthServer interface {
	Logout(context.Context, *Default_REQ) (*Default_RES, error)
	LoginByPhone(context.Context, *LoginByPhone_REQ) (*Default_RES, error)
	LoginByAccount(context.Context, *LoginByAccount_REQ) (*Default_RES, error)
	GetPermissionList(context.Context, *GetPermissionList_REQ) (*GetPermissionList_RES, error)
	SMSSendVerifyCode(context.Context, *SMSSendVerifyCode_REQ) (*SMSSendVerifyCode_RES, error)
	SMSVerifyCode(context.Context, *SMSVerifyCode_REQ) (*Default_RES, error)
	CheckAuth(context.Context, *CheckAuth_REQ) (*CheckAuth_RES, error)
	GetFileConfig(context.Context, *GetFileConfig_REQ) (*GetFileConfig_RES, error)
	mustEmbedUnimplementedZauthServer()
}

// UnimplementedZauthServer must be embedded to have forward compatible implementations.
type UnimplementedZauthServer struct {
}

func (UnimplementedZauthServer) Logout(context.Context, *Default_REQ) (*Default_RES, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedZauthServer) LoginByPhone(context.Context, *LoginByPhone_REQ) (*Default_RES, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginByPhone not implemented")
}
func (UnimplementedZauthServer) LoginByAccount(context.Context, *LoginByAccount_REQ) (*Default_RES, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginByAccount not implemented")
}
func (UnimplementedZauthServer) GetPermissionList(context.Context, *GetPermissionList_REQ) (*GetPermissionList_RES, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermissionList not implemented")
}
func (UnimplementedZauthServer) SMSSendVerifyCode(context.Context, *SMSSendVerifyCode_REQ) (*SMSSendVerifyCode_RES, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SMSSendVerifyCode not implemented")
}
func (UnimplementedZauthServer) SMSVerifyCode(context.Context, *SMSVerifyCode_REQ) (*Default_RES, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SMSVerifyCode not implemented")
}
func (UnimplementedZauthServer) CheckAuth(context.Context, *CheckAuth_REQ) (*CheckAuth_RES, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAuth not implemented")
}
func (UnimplementedZauthServer) GetFileConfig(context.Context, *GetFileConfig_REQ) (*GetFileConfig_RES, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileConfig not implemented")
}
func (UnimplementedZauthServer) mustEmbedUnimplementedZauthServer() {}

// UnsafeZauthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ZauthServer will
// result in compilation errors.
type UnsafeZauthServer interface {
	mustEmbedUnimplementedZauthServer()
}

func RegisterZauthServer(s grpc.ServiceRegistrar, srv ZauthServer) {
	s.RegisterService(&Zauth_ServiceDesc, srv)
}

func _Zauth_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Default_REQ)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZauthServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zauth_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZauthServer).Logout(ctx, req.(*Default_REQ))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zauth_LoginByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginByPhone_REQ)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZauthServer).LoginByPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zauth_LoginByPhone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZauthServer).LoginByPhone(ctx, req.(*LoginByPhone_REQ))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zauth_LoginByAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginByAccount_REQ)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZauthServer).LoginByAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zauth_LoginByAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZauthServer).LoginByAccount(ctx, req.(*LoginByAccount_REQ))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zauth_GetPermissionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPermissionList_REQ)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZauthServer).GetPermissionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zauth_GetPermissionList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZauthServer).GetPermissionList(ctx, req.(*GetPermissionList_REQ))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zauth_SMSSendVerifyCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SMSSendVerifyCode_REQ)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZauthServer).SMSSendVerifyCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zauth_SMSSendVerifyCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZauthServer).SMSSendVerifyCode(ctx, req.(*SMSSendVerifyCode_REQ))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zauth_SMSVerifyCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SMSVerifyCode_REQ)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZauthServer).SMSVerifyCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zauth_SMSVerifyCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZauthServer).SMSVerifyCode(ctx, req.(*SMSVerifyCode_REQ))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zauth_CheckAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAuth_REQ)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZauthServer).CheckAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zauth_CheckAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZauthServer).CheckAuth(ctx, req.(*CheckAuth_REQ))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zauth_GetFileConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileConfig_REQ)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZauthServer).GetFileConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zauth_GetFileConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZauthServer).GetFileConfig(ctx, req.(*GetFileConfig_REQ))
	}
	return interceptor(ctx, in, info, handler)
}

// Zauth_ServiceDesc is the grpc.ServiceDesc for Zauth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Zauth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zauth_pb.zauth",
	HandlerType: (*ZauthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Logout",
			Handler:    _Zauth_Logout_Handler,
		},
		{
			MethodName: "LoginByPhone",
			Handler:    _Zauth_LoginByPhone_Handler,
		},
		{
			MethodName: "LoginByAccount",
			Handler:    _Zauth_LoginByAccount_Handler,
		},
		{
			MethodName: "GetPermissionList",
			Handler:    _Zauth_GetPermissionList_Handler,
		},
		{
			MethodName: "SMSSendVerifyCode",
			Handler:    _Zauth_SMSSendVerifyCode_Handler,
		},
		{
			MethodName: "SMSVerifyCode",
			Handler:    _Zauth_SMSVerifyCode_Handler,
		},
		{
			MethodName: "CheckAuth",
			Handler:    _Zauth_CheckAuth_Handler,
		},
		{
			MethodName: "GetFileConfig",
			Handler:    _Zauth_GetFileConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zauth.proto",
}
