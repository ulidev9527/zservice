// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.1
// source: zauth.proto

package zauth_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Zauth_Logout_FullMethodName                      = "/zauth_pb.zauth/Logout"
	Zauth_LoginByPhone_FullMethodName                = "/zauth_pb.zauth/LoginByPhone"
	Zauth_LoginByName_FullMethodName                 = "/zauth_pb.zauth/LoginByName"
	Zauth_LoginCheck_FullMethodName                  = "/zauth_pb.zauth/LoginCheck"
	Zauth_HasUID_FullMethodName                      = "/zauth_pb.zauth/HasUID"
	Zauth_PermissionCreate_FullMethodName            = "/zauth_pb.zauth/PermissionCreate"
	Zauth_PermissionListGet_FullMethodName           = "/zauth_pb.zauth/PermissionListGet"
	Zauth_PermissionUpdate_FullMethodName            = "/zauth_pb.zauth/PermissionUpdate"
	Zauth_PermissionBind_FullMethodName              = "/zauth_pb.zauth/PermissionBind"
	Zauth_OrgCreate_FullMethodName                   = "/zauth_pb.zauth/OrgCreate"
	Zauth_OrgListGet_FullMethodName                  = "/zauth_pb.zauth/OrgListGet"
	Zauth_OrgUpdate_FullMethodName                   = "/zauth_pb.zauth/OrgUpdate"
	Zauth_SMSVerifyCodeSend_FullMethodName           = "/zauth_pb.zauth/SMSVerifyCodeSend"
	Zauth_SMSVerifyCodeVerify_FullMethodName         = "/zauth_pb.zauth/SMSVerifyCodeVerify"
	Zauth_CheckAuth_FullMethodName                   = "/zauth_pb.zauth/CheckAuth"
	Zauth_HasZZZZString_FullMethodName               = "/zauth_pb.zauth/HasZZZZString"
	Zauth_ConfigGetFileConfig_FullMethodName         = "/zauth_pb.zauth/ConfigGetFileConfig"
	Zauth_ConfigSyncServiceFileConfig_FullMethodName = "/zauth_pb.zauth/ConfigSyncServiceFileConfig"
	Zauth_ConfigSyncServiceEnvConfig_FullMethodName  = "/zauth_pb.zauth/ConfigSyncServiceEnvConfig"
	Zauth_ConfigGetServiceEnvConfig_FullMethodName   = "/zauth_pb.zauth/ConfigGetServiceEnvConfig"
	Zauth_ConfigGetEnvConfig_FullMethodName          = "/zauth_pb.zauth/ConfigGetEnvConfig"
	Zauth_SetServiceKV_FullMethodName                = "/zauth_pb.zauth/SetServiceKV"
	Zauth_GetServiceKV_FullMethodName                = "/zauth_pb.zauth/GetServiceKV"
	Zauth_ServiceRegist_FullMethodName               = "/zauth_pb.zauth/ServiceRegist"
	Zauth_AddUserToOrg_FullMethodName                = "/zauth_pb.zauth/AddUserToOrg"
	Zauth_AddAsset_FullMethodName                    = "/zauth_pb.zauth/AddAsset"
)

// ZauthClient is the client API for Zauth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ZauthClient interface {
	Logout(ctx context.Context, in *Logout_REQ, opts ...grpc.CallOption) (*Default_RES, error)
	LoginByPhone(ctx context.Context, in *LoginByPhone_REQ, opts ...grpc.CallOption) (*Login_RES, error)
	LoginByName(ctx context.Context, in *LoginByName_REQ, opts ...grpc.CallOption) (*Login_RES, error)
	LoginCheck(ctx context.Context, in *LoginCheck_REQ, opts ...grpc.CallOption) (*LoginCheck_RES, error)
	HasUID(ctx context.Context, in *HasUID_REQ, opts ...grpc.CallOption) (*Default_RES, error)
	PermissionCreate(ctx context.Context, in *PermissionInfo, opts ...grpc.CallOption) (*PermissionInfo_RES, error)
	PermissionListGet(ctx context.Context, in *PermissionListGet_REQ, opts ...grpc.CallOption) (*PermissionInfoList_RES, error)
	PermissionUpdate(ctx context.Context, in *PermissionInfo, opts ...grpc.CallOption) (*PermissionInfo_RES, error)
	PermissionBind(ctx context.Context, in *PermissionBind_REQ, opts ...grpc.CallOption) (*PermissionBind_RES, error)
	OrgCreate(ctx context.Context, in *OrgInfo, opts ...grpc.CallOption) (*OrgInfo_RES, error)
	OrgListGet(ctx context.Context, in *OrgListGet_REQ, opts ...grpc.CallOption) (*OrgInfoList_RES, error)
	OrgUpdate(ctx context.Context, in *OrgInfo, opts ...grpc.CallOption) (*OrgInfo_RES, error)
	SMSVerifyCodeSend(ctx context.Context, in *SMSVerifyCodeSend_REQ, opts ...grpc.CallOption) (*SMSSendVerifyCode_RES, error)
	SMSVerifyCodeVerify(ctx context.Context, in *SMSVerifyCodeVerify_REQ, opts ...grpc.CallOption) (*Default_RES, error)
	CheckAuth(ctx context.Context, in *CheckAuth_REQ, opts ...grpc.CallOption) (*CheckAuth_RES, error)
	HasZZZZString(ctx context.Context, in *HasZZZZString_REQ, opts ...grpc.CallOption) (*Default_RES, error)
	ConfigGetFileConfig(ctx context.Context, in *ConfigGetFileConfig_REQ, opts ...grpc.CallOption) (*ConfigGetFileConfig_RES, error)
	ConfigSyncServiceFileConfig(ctx context.Context, in *ConfigSyncServiceFileConfig_REQ, opts ...grpc.CallOption) (*Default_RES, error)
	ConfigSyncServiceEnvConfig(ctx context.Context, in *ConfigSyncServiceEnvConfig_REQ, opts ...grpc.CallOption) (*ConfigSyncServiceEnvConfig_RES, error)
	ConfigGetServiceEnvConfig(ctx context.Context, in *ConfigGetServiceEnvConfig_REQ, opts ...grpc.CallOption) (*ConfigGetServiceEnvConfig_RES, error)
	ConfigGetEnvConfig(ctx context.Context, in *ConfigGetEnvConfig_REQ, opts ...grpc.CallOption) (*ConfigGetServiceEnvConfig_RES, error)
	SetServiceKV(ctx context.Context, in *SetServiceKV_REQ, opts ...grpc.CallOption) (*Default_RES, error)
	GetServiceKV(ctx context.Context, in *GetServiceKV_REQ, opts ...grpc.CallOption) (*GetServiceKV_RES, error)
	ServiceRegist(ctx context.Context, in *ServiceRegist_REQ, opts ...grpc.CallOption) (*ServiceRegist_RES, error)
	AddUserToOrg(ctx context.Context, in *AddUserToOrg_REQ, opts ...grpc.CallOption) (*Default_RES, error)
	AddAsset(ctx context.Context, in *AddAsset_REQ, opts ...grpc.CallOption) (*AssetInfo_RES, error)
}

type zauthClient struct {
	cc grpc.ClientConnInterface
}

func NewZauthClient(cc grpc.ClientConnInterface) ZauthClient {
	return &zauthClient{cc}
}

func (c *zauthClient) Logout(ctx context.Context, in *Logout_REQ, opts ...grpc.CallOption) (*Default_RES, error) {
	out := new(Default_RES)
	err := c.cc.Invoke(ctx, Zauth_Logout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zauthClient) LoginByPhone(ctx context.Context, in *LoginByPhone_REQ, opts ...grpc.CallOption) (*Login_RES, error) {
	out := new(Login_RES)
	err := c.cc.Invoke(ctx, Zauth_LoginByPhone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zauthClient) LoginByName(ctx context.Context, in *LoginByName_REQ, opts ...grpc.CallOption) (*Login_RES, error) {
	out := new(Login_RES)
	err := c.cc.Invoke(ctx, Zauth_LoginByName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zauthClient) LoginCheck(ctx context.Context, in *LoginCheck_REQ, opts ...grpc.CallOption) (*LoginCheck_RES, error) {
	out := new(LoginCheck_RES)
	err := c.cc.Invoke(ctx, Zauth_LoginCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zauthClient) HasUID(ctx context.Context, in *HasUID_REQ, opts ...grpc.CallOption) (*Default_RES, error) {
	out := new(Default_RES)
	err := c.cc.Invoke(ctx, Zauth_HasUID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zauthClient) PermissionCreate(ctx context.Context, in *PermissionInfo, opts ...grpc.CallOption) (*PermissionInfo_RES, error) {
	out := new(PermissionInfo_RES)
	err := c.cc.Invoke(ctx, Zauth_PermissionCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zauthClient) PermissionListGet(ctx context.Context, in *PermissionListGet_REQ, opts ...grpc.CallOption) (*PermissionInfoList_RES, error) {
	out := new(PermissionInfoList_RES)
	err := c.cc.Invoke(ctx, Zauth_PermissionListGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zauthClient) PermissionUpdate(ctx context.Context, in *PermissionInfo, opts ...grpc.CallOption) (*PermissionInfo_RES, error) {
	out := new(PermissionInfo_RES)
	err := c.cc.Invoke(ctx, Zauth_PermissionUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zauthClient) PermissionBind(ctx context.Context, in *PermissionBind_REQ, opts ...grpc.CallOption) (*PermissionBind_RES, error) {
	out := new(PermissionBind_RES)
	err := c.cc.Invoke(ctx, Zauth_PermissionBind_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zauthClient) OrgCreate(ctx context.Context, in *OrgInfo, opts ...grpc.CallOption) (*OrgInfo_RES, error) {
	out := new(OrgInfo_RES)
	err := c.cc.Invoke(ctx, Zauth_OrgCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zauthClient) OrgListGet(ctx context.Context, in *OrgListGet_REQ, opts ...grpc.CallOption) (*OrgInfoList_RES, error) {
	out := new(OrgInfoList_RES)
	err := c.cc.Invoke(ctx, Zauth_OrgListGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zauthClient) OrgUpdate(ctx context.Context, in *OrgInfo, opts ...grpc.CallOption) (*OrgInfo_RES, error) {
	out := new(OrgInfo_RES)
	err := c.cc.Invoke(ctx, Zauth_OrgUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zauthClient) SMSVerifyCodeSend(ctx context.Context, in *SMSVerifyCodeSend_REQ, opts ...grpc.CallOption) (*SMSSendVerifyCode_RES, error) {
	out := new(SMSSendVerifyCode_RES)
	err := c.cc.Invoke(ctx, Zauth_SMSVerifyCodeSend_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zauthClient) SMSVerifyCodeVerify(ctx context.Context, in *SMSVerifyCodeVerify_REQ, opts ...grpc.CallOption) (*Default_RES, error) {
	out := new(Default_RES)
	err := c.cc.Invoke(ctx, Zauth_SMSVerifyCodeVerify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zauthClient) CheckAuth(ctx context.Context, in *CheckAuth_REQ, opts ...grpc.CallOption) (*CheckAuth_RES, error) {
	out := new(CheckAuth_RES)
	err := c.cc.Invoke(ctx, Zauth_CheckAuth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zauthClient) HasZZZZString(ctx context.Context, in *HasZZZZString_REQ, opts ...grpc.CallOption) (*Default_RES, error) {
	out := new(Default_RES)
	err := c.cc.Invoke(ctx, Zauth_HasZZZZString_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zauthClient) ConfigGetFileConfig(ctx context.Context, in *ConfigGetFileConfig_REQ, opts ...grpc.CallOption) (*ConfigGetFileConfig_RES, error) {
	out := new(ConfigGetFileConfig_RES)
	err := c.cc.Invoke(ctx, Zauth_ConfigGetFileConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zauthClient) ConfigSyncServiceFileConfig(ctx context.Context, in *ConfigSyncServiceFileConfig_REQ, opts ...grpc.CallOption) (*Default_RES, error) {
	out := new(Default_RES)
	err := c.cc.Invoke(ctx, Zauth_ConfigSyncServiceFileConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zauthClient) ConfigSyncServiceEnvConfig(ctx context.Context, in *ConfigSyncServiceEnvConfig_REQ, opts ...grpc.CallOption) (*ConfigSyncServiceEnvConfig_RES, error) {
	out := new(ConfigSyncServiceEnvConfig_RES)
	err := c.cc.Invoke(ctx, Zauth_ConfigSyncServiceEnvConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zauthClient) ConfigGetServiceEnvConfig(ctx context.Context, in *ConfigGetServiceEnvConfig_REQ, opts ...grpc.CallOption) (*ConfigGetServiceEnvConfig_RES, error) {
	out := new(ConfigGetServiceEnvConfig_RES)
	err := c.cc.Invoke(ctx, Zauth_ConfigGetServiceEnvConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zauthClient) ConfigGetEnvConfig(ctx context.Context, in *ConfigGetEnvConfig_REQ, opts ...grpc.CallOption) (*ConfigGetServiceEnvConfig_RES, error) {
	out := new(ConfigGetServiceEnvConfig_RES)
	err := c.cc.Invoke(ctx, Zauth_ConfigGetEnvConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zauthClient) SetServiceKV(ctx context.Context, in *SetServiceKV_REQ, opts ...grpc.CallOption) (*Default_RES, error) {
	out := new(Default_RES)
	err := c.cc.Invoke(ctx, Zauth_SetServiceKV_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zauthClient) GetServiceKV(ctx context.Context, in *GetServiceKV_REQ, opts ...grpc.CallOption) (*GetServiceKV_RES, error) {
	out := new(GetServiceKV_RES)
	err := c.cc.Invoke(ctx, Zauth_GetServiceKV_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zauthClient) ServiceRegist(ctx context.Context, in *ServiceRegist_REQ, opts ...grpc.CallOption) (*ServiceRegist_RES, error) {
	out := new(ServiceRegist_RES)
	err := c.cc.Invoke(ctx, Zauth_ServiceRegist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zauthClient) AddUserToOrg(ctx context.Context, in *AddUserToOrg_REQ, opts ...grpc.CallOption) (*Default_RES, error) {
	out := new(Default_RES)
	err := c.cc.Invoke(ctx, Zauth_AddUserToOrg_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zauthClient) AddAsset(ctx context.Context, in *AddAsset_REQ, opts ...grpc.CallOption) (*AssetInfo_RES, error) {
	out := new(AssetInfo_RES)
	err := c.cc.Invoke(ctx, Zauth_AddAsset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ZauthServer is the server API for Zauth service.
// All implementations must embed UnimplementedZauthServer
// for forward compatibility
type ZauthServer interface {
	Logout(context.Context, *Logout_REQ) (*Default_RES, error)
	LoginByPhone(context.Context, *LoginByPhone_REQ) (*Login_RES, error)
	LoginByName(context.Context, *LoginByName_REQ) (*Login_RES, error)
	LoginCheck(context.Context, *LoginCheck_REQ) (*LoginCheck_RES, error)
	HasUID(context.Context, *HasUID_REQ) (*Default_RES, error)
	PermissionCreate(context.Context, *PermissionInfo) (*PermissionInfo_RES, error)
	PermissionListGet(context.Context, *PermissionListGet_REQ) (*PermissionInfoList_RES, error)
	PermissionUpdate(context.Context, *PermissionInfo) (*PermissionInfo_RES, error)
	PermissionBind(context.Context, *PermissionBind_REQ) (*PermissionBind_RES, error)
	OrgCreate(context.Context, *OrgInfo) (*OrgInfo_RES, error)
	OrgListGet(context.Context, *OrgListGet_REQ) (*OrgInfoList_RES, error)
	OrgUpdate(context.Context, *OrgInfo) (*OrgInfo_RES, error)
	SMSVerifyCodeSend(context.Context, *SMSVerifyCodeSend_REQ) (*SMSSendVerifyCode_RES, error)
	SMSVerifyCodeVerify(context.Context, *SMSVerifyCodeVerify_REQ) (*Default_RES, error)
	CheckAuth(context.Context, *CheckAuth_REQ) (*CheckAuth_RES, error)
	HasZZZZString(context.Context, *HasZZZZString_REQ) (*Default_RES, error)
	ConfigGetFileConfig(context.Context, *ConfigGetFileConfig_REQ) (*ConfigGetFileConfig_RES, error)
	ConfigSyncServiceFileConfig(context.Context, *ConfigSyncServiceFileConfig_REQ) (*Default_RES, error)
	ConfigSyncServiceEnvConfig(context.Context, *ConfigSyncServiceEnvConfig_REQ) (*ConfigSyncServiceEnvConfig_RES, error)
	ConfigGetServiceEnvConfig(context.Context, *ConfigGetServiceEnvConfig_REQ) (*ConfigGetServiceEnvConfig_RES, error)
	ConfigGetEnvConfig(context.Context, *ConfigGetEnvConfig_REQ) (*ConfigGetServiceEnvConfig_RES, error)
	SetServiceKV(context.Context, *SetServiceKV_REQ) (*Default_RES, error)
	GetServiceKV(context.Context, *GetServiceKV_REQ) (*GetServiceKV_RES, error)
	ServiceRegist(context.Context, *ServiceRegist_REQ) (*ServiceRegist_RES, error)
	AddUserToOrg(context.Context, *AddUserToOrg_REQ) (*Default_RES, error)
	AddAsset(context.Context, *AddAsset_REQ) (*AssetInfo_RES, error)
	mustEmbedUnimplementedZauthServer()
}

// UnimplementedZauthServer must be embedded to have forward compatible implementations.
type UnimplementedZauthServer struct {
}

func (UnimplementedZauthServer) Logout(context.Context, *Logout_REQ) (*Default_RES, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedZauthServer) LoginByPhone(context.Context, *LoginByPhone_REQ) (*Login_RES, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginByPhone not implemented")
}
func (UnimplementedZauthServer) LoginByName(context.Context, *LoginByName_REQ) (*Login_RES, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginByName not implemented")
}
func (UnimplementedZauthServer) LoginCheck(context.Context, *LoginCheck_REQ) (*LoginCheck_RES, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginCheck not implemented")
}
func (UnimplementedZauthServer) HasUID(context.Context, *HasUID_REQ) (*Default_RES, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasUID not implemented")
}
func (UnimplementedZauthServer) PermissionCreate(context.Context, *PermissionInfo) (*PermissionInfo_RES, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PermissionCreate not implemented")
}
func (UnimplementedZauthServer) PermissionListGet(context.Context, *PermissionListGet_REQ) (*PermissionInfoList_RES, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PermissionListGet not implemented")
}
func (UnimplementedZauthServer) PermissionUpdate(context.Context, *PermissionInfo) (*PermissionInfo_RES, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PermissionUpdate not implemented")
}
func (UnimplementedZauthServer) PermissionBind(context.Context, *PermissionBind_REQ) (*PermissionBind_RES, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PermissionBind not implemented")
}
func (UnimplementedZauthServer) OrgCreate(context.Context, *OrgInfo) (*OrgInfo_RES, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrgCreate not implemented")
}
func (UnimplementedZauthServer) OrgListGet(context.Context, *OrgListGet_REQ) (*OrgInfoList_RES, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrgListGet not implemented")
}
func (UnimplementedZauthServer) OrgUpdate(context.Context, *OrgInfo) (*OrgInfo_RES, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrgUpdate not implemented")
}
func (UnimplementedZauthServer) SMSVerifyCodeSend(context.Context, *SMSVerifyCodeSend_REQ) (*SMSSendVerifyCode_RES, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SMSVerifyCodeSend not implemented")
}
func (UnimplementedZauthServer) SMSVerifyCodeVerify(context.Context, *SMSVerifyCodeVerify_REQ) (*Default_RES, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SMSVerifyCodeVerify not implemented")
}
func (UnimplementedZauthServer) CheckAuth(context.Context, *CheckAuth_REQ) (*CheckAuth_RES, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAuth not implemented")
}
func (UnimplementedZauthServer) HasZZZZString(context.Context, *HasZZZZString_REQ) (*Default_RES, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasZZZZString not implemented")
}
func (UnimplementedZauthServer) ConfigGetFileConfig(context.Context, *ConfigGetFileConfig_REQ) (*ConfigGetFileConfig_RES, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigGetFileConfig not implemented")
}
func (UnimplementedZauthServer) ConfigSyncServiceFileConfig(context.Context, *ConfigSyncServiceFileConfig_REQ) (*Default_RES, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigSyncServiceFileConfig not implemented")
}
func (UnimplementedZauthServer) ConfigSyncServiceEnvConfig(context.Context, *ConfigSyncServiceEnvConfig_REQ) (*ConfigSyncServiceEnvConfig_RES, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigSyncServiceEnvConfig not implemented")
}
func (UnimplementedZauthServer) ConfigGetServiceEnvConfig(context.Context, *ConfigGetServiceEnvConfig_REQ) (*ConfigGetServiceEnvConfig_RES, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigGetServiceEnvConfig not implemented")
}
func (UnimplementedZauthServer) ConfigGetEnvConfig(context.Context, *ConfigGetEnvConfig_REQ) (*ConfigGetServiceEnvConfig_RES, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigGetEnvConfig not implemented")
}
func (UnimplementedZauthServer) SetServiceKV(context.Context, *SetServiceKV_REQ) (*Default_RES, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetServiceKV not implemented")
}
func (UnimplementedZauthServer) GetServiceKV(context.Context, *GetServiceKV_REQ) (*GetServiceKV_RES, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceKV not implemented")
}
func (UnimplementedZauthServer) ServiceRegist(context.Context, *ServiceRegist_REQ) (*ServiceRegist_RES, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceRegist not implemented")
}
func (UnimplementedZauthServer) AddUserToOrg(context.Context, *AddUserToOrg_REQ) (*Default_RES, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserToOrg not implemented")
}
func (UnimplementedZauthServer) AddAsset(context.Context, *AddAsset_REQ) (*AssetInfo_RES, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAsset not implemented")
}
func (UnimplementedZauthServer) mustEmbedUnimplementedZauthServer() {}

// UnsafeZauthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ZauthServer will
// result in compilation errors.
type UnsafeZauthServer interface {
	mustEmbedUnimplementedZauthServer()
}

func RegisterZauthServer(s grpc.ServiceRegistrar, srv ZauthServer) {
	s.RegisterService(&Zauth_ServiceDesc, srv)
}

func _Zauth_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Logout_REQ)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZauthServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zauth_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZauthServer).Logout(ctx, req.(*Logout_REQ))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zauth_LoginByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginByPhone_REQ)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZauthServer).LoginByPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zauth_LoginByPhone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZauthServer).LoginByPhone(ctx, req.(*LoginByPhone_REQ))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zauth_LoginByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginByName_REQ)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZauthServer).LoginByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zauth_LoginByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZauthServer).LoginByName(ctx, req.(*LoginByName_REQ))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zauth_LoginCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginCheck_REQ)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZauthServer).LoginCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zauth_LoginCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZauthServer).LoginCheck(ctx, req.(*LoginCheck_REQ))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zauth_HasUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HasUID_REQ)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZauthServer).HasUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zauth_HasUID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZauthServer).HasUID(ctx, req.(*HasUID_REQ))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zauth_PermissionCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZauthServer).PermissionCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zauth_PermissionCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZauthServer).PermissionCreate(ctx, req.(*PermissionInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zauth_PermissionListGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionListGet_REQ)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZauthServer).PermissionListGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zauth_PermissionListGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZauthServer).PermissionListGet(ctx, req.(*PermissionListGet_REQ))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zauth_PermissionUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZauthServer).PermissionUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zauth_PermissionUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZauthServer).PermissionUpdate(ctx, req.(*PermissionInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zauth_PermissionBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionBind_REQ)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZauthServer).PermissionBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zauth_PermissionBind_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZauthServer).PermissionBind(ctx, req.(*PermissionBind_REQ))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zauth_OrgCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZauthServer).OrgCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zauth_OrgCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZauthServer).OrgCreate(ctx, req.(*OrgInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zauth_OrgListGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgListGet_REQ)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZauthServer).OrgListGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zauth_OrgListGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZauthServer).OrgListGet(ctx, req.(*OrgListGet_REQ))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zauth_OrgUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZauthServer).OrgUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zauth_OrgUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZauthServer).OrgUpdate(ctx, req.(*OrgInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zauth_SMSVerifyCodeSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SMSVerifyCodeSend_REQ)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZauthServer).SMSVerifyCodeSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zauth_SMSVerifyCodeSend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZauthServer).SMSVerifyCodeSend(ctx, req.(*SMSVerifyCodeSend_REQ))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zauth_SMSVerifyCodeVerify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SMSVerifyCodeVerify_REQ)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZauthServer).SMSVerifyCodeVerify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zauth_SMSVerifyCodeVerify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZauthServer).SMSVerifyCodeVerify(ctx, req.(*SMSVerifyCodeVerify_REQ))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zauth_CheckAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAuth_REQ)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZauthServer).CheckAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zauth_CheckAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZauthServer).CheckAuth(ctx, req.(*CheckAuth_REQ))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zauth_HasZZZZString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HasZZZZString_REQ)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZauthServer).HasZZZZString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zauth_HasZZZZString_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZauthServer).HasZZZZString(ctx, req.(*HasZZZZString_REQ))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zauth_ConfigGetFileConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigGetFileConfig_REQ)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZauthServer).ConfigGetFileConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zauth_ConfigGetFileConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZauthServer).ConfigGetFileConfig(ctx, req.(*ConfigGetFileConfig_REQ))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zauth_ConfigSyncServiceFileConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigSyncServiceFileConfig_REQ)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZauthServer).ConfigSyncServiceFileConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zauth_ConfigSyncServiceFileConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZauthServer).ConfigSyncServiceFileConfig(ctx, req.(*ConfigSyncServiceFileConfig_REQ))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zauth_ConfigSyncServiceEnvConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigSyncServiceEnvConfig_REQ)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZauthServer).ConfigSyncServiceEnvConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zauth_ConfigSyncServiceEnvConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZauthServer).ConfigSyncServiceEnvConfig(ctx, req.(*ConfigSyncServiceEnvConfig_REQ))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zauth_ConfigGetServiceEnvConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigGetServiceEnvConfig_REQ)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZauthServer).ConfigGetServiceEnvConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zauth_ConfigGetServiceEnvConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZauthServer).ConfigGetServiceEnvConfig(ctx, req.(*ConfigGetServiceEnvConfig_REQ))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zauth_ConfigGetEnvConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigGetEnvConfig_REQ)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZauthServer).ConfigGetEnvConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zauth_ConfigGetEnvConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZauthServer).ConfigGetEnvConfig(ctx, req.(*ConfigGetEnvConfig_REQ))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zauth_SetServiceKV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetServiceKV_REQ)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZauthServer).SetServiceKV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zauth_SetServiceKV_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZauthServer).SetServiceKV(ctx, req.(*SetServiceKV_REQ))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zauth_GetServiceKV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceKV_REQ)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZauthServer).GetServiceKV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zauth_GetServiceKV_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZauthServer).GetServiceKV(ctx, req.(*GetServiceKV_REQ))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zauth_ServiceRegist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceRegist_REQ)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZauthServer).ServiceRegist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zauth_ServiceRegist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZauthServer).ServiceRegist(ctx, req.(*ServiceRegist_REQ))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zauth_AddUserToOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserToOrg_REQ)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZauthServer).AddUserToOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zauth_AddUserToOrg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZauthServer).AddUserToOrg(ctx, req.(*AddUserToOrg_REQ))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zauth_AddAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAsset_REQ)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZauthServer).AddAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zauth_AddAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZauthServer).AddAsset(ctx, req.(*AddAsset_REQ))
	}
	return interceptor(ctx, in, info, handler)
}

// Zauth_ServiceDesc is the grpc.ServiceDesc for Zauth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Zauth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zauth_pb.zauth",
	HandlerType: (*ZauthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Logout",
			Handler:    _Zauth_Logout_Handler,
		},
		{
			MethodName: "LoginByPhone",
			Handler:    _Zauth_LoginByPhone_Handler,
		},
		{
			MethodName: "LoginByName",
			Handler:    _Zauth_LoginByName_Handler,
		},
		{
			MethodName: "LoginCheck",
			Handler:    _Zauth_LoginCheck_Handler,
		},
		{
			MethodName: "HasUID",
			Handler:    _Zauth_HasUID_Handler,
		},
		{
			MethodName: "PermissionCreate",
			Handler:    _Zauth_PermissionCreate_Handler,
		},
		{
			MethodName: "PermissionListGet",
			Handler:    _Zauth_PermissionListGet_Handler,
		},
		{
			MethodName: "PermissionUpdate",
			Handler:    _Zauth_PermissionUpdate_Handler,
		},
		{
			MethodName: "PermissionBind",
			Handler:    _Zauth_PermissionBind_Handler,
		},
		{
			MethodName: "OrgCreate",
			Handler:    _Zauth_OrgCreate_Handler,
		},
		{
			MethodName: "OrgListGet",
			Handler:    _Zauth_OrgListGet_Handler,
		},
		{
			MethodName: "OrgUpdate",
			Handler:    _Zauth_OrgUpdate_Handler,
		},
		{
			MethodName: "SMSVerifyCodeSend",
			Handler:    _Zauth_SMSVerifyCodeSend_Handler,
		},
		{
			MethodName: "SMSVerifyCodeVerify",
			Handler:    _Zauth_SMSVerifyCodeVerify_Handler,
		},
		{
			MethodName: "CheckAuth",
			Handler:    _Zauth_CheckAuth_Handler,
		},
		{
			MethodName: "HasZZZZString",
			Handler:    _Zauth_HasZZZZString_Handler,
		},
		{
			MethodName: "ConfigGetFileConfig",
			Handler:    _Zauth_ConfigGetFileConfig_Handler,
		},
		{
			MethodName: "ConfigSyncServiceFileConfig",
			Handler:    _Zauth_ConfigSyncServiceFileConfig_Handler,
		},
		{
			MethodName: "ConfigSyncServiceEnvConfig",
			Handler:    _Zauth_ConfigSyncServiceEnvConfig_Handler,
		},
		{
			MethodName: "ConfigGetServiceEnvConfig",
			Handler:    _Zauth_ConfigGetServiceEnvConfig_Handler,
		},
		{
			MethodName: "ConfigGetEnvConfig",
			Handler:    _Zauth_ConfigGetEnvConfig_Handler,
		},
		{
			MethodName: "SetServiceKV",
			Handler:    _Zauth_SetServiceKV_Handler,
		},
		{
			MethodName: "GetServiceKV",
			Handler:    _Zauth_GetServiceKV_Handler,
		},
		{
			MethodName: "ServiceRegist",
			Handler:    _Zauth_ServiceRegist_Handler,
		},
		{
			MethodName: "AddUserToOrg",
			Handler:    _Zauth_AddUserToOrg_Handler,
		},
		{
			MethodName: "AddAsset",
			Handler:    _Zauth_AddAsset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zauth.proto",
}
