// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: zsms.proto

package zsms_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Zsms_SendVerifyCode_FullMethodName = "/zsms_pb.zsms/SendVerifyCode"
	Zsms_VerifyCode_FullMethodName     = "/zsms_pb.zsms/VerifyCode"
)

// ZsmsClient is the client API for Zsms service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ZsmsClient interface {
	SendVerifyCode(ctx context.Context, in *SendVerifyCode_REQ, opts ...grpc.CallOption) (*Default_RES, error)
	VerifyCode(ctx context.Context, in *VerifyCode_REQ, opts ...grpc.CallOption) (*Default_RES, error)
}

type zsmsClient struct {
	cc grpc.ClientConnInterface
}

func NewZsmsClient(cc grpc.ClientConnInterface) ZsmsClient {
	return &zsmsClient{cc}
}

func (c *zsmsClient) SendVerifyCode(ctx context.Context, in *SendVerifyCode_REQ, opts ...grpc.CallOption) (*Default_RES, error) {
	out := new(Default_RES)
	err := c.cc.Invoke(ctx, Zsms_SendVerifyCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zsmsClient) VerifyCode(ctx context.Context, in *VerifyCode_REQ, opts ...grpc.CallOption) (*Default_RES, error) {
	out := new(Default_RES)
	err := c.cc.Invoke(ctx, Zsms_VerifyCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ZsmsServer is the server API for Zsms service.
// All implementations must embed UnimplementedZsmsServer
// for forward compatibility
type ZsmsServer interface {
	SendVerifyCode(context.Context, *SendVerifyCode_REQ) (*Default_RES, error)
	VerifyCode(context.Context, *VerifyCode_REQ) (*Default_RES, error)
	mustEmbedUnimplementedZsmsServer()
}

// UnimplementedZsmsServer must be embedded to have forward compatible implementations.
type UnimplementedZsmsServer struct {
}

func (UnimplementedZsmsServer) SendVerifyCode(context.Context, *SendVerifyCode_REQ) (*Default_RES, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendVerifyCode not implemented")
}
func (UnimplementedZsmsServer) VerifyCode(context.Context, *VerifyCode_REQ) (*Default_RES, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyCode not implemented")
}
func (UnimplementedZsmsServer) mustEmbedUnimplementedZsmsServer() {}

// UnsafeZsmsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ZsmsServer will
// result in compilation errors.
type UnsafeZsmsServer interface {
	mustEmbedUnimplementedZsmsServer()
}

func RegisterZsmsServer(s grpc.ServiceRegistrar, srv ZsmsServer) {
	s.RegisterService(&Zsms_ServiceDesc, srv)
}

func _Zsms_SendVerifyCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendVerifyCode_REQ)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZsmsServer).SendVerifyCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zsms_SendVerifyCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZsmsServer).SendVerifyCode(ctx, req.(*SendVerifyCode_REQ))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zsms_VerifyCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyCode_REQ)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZsmsServer).VerifyCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zsms_VerifyCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZsmsServer).VerifyCode(ctx, req.(*VerifyCode_REQ))
	}
	return interceptor(ctx, in, info, handler)
}

// Zsms_ServiceDesc is the grpc.ServiceDesc for Zsms service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Zsms_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zsms_pb.zsms",
	HandlerType: (*ZsmsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendVerifyCode",
			Handler:    _Zsms_SendVerifyCode_Handler,
		},
		{
			MethodName: "VerifyCode",
			Handler:    _Zsms_VerifyCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zsms.proto",
}
